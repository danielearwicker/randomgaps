{"mappings":"AAAA,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,AAAC;AAC9C,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,AAAC;AAElC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,gBAAgB,CAAC;AAC5D,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,gBAAgB,CAAC;AAE9D,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC;AAC3B,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;AACtB,GAAG,CAAC,SAAS,GAAG,EAAE,CAAC;AAEnB,SAAS,GAAG,CAAC,IAAY,EAAE,EAAU,EAAE;IACnC,GAAG,CAAC,SAAS,EAAE,CAAC;IAChB,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,GAAG,EACxD,IAAI,CAAC,EAAE,GAAI,CAAA,IAAI,GAAG,CAAC,CAAA,AAAC,EAAE,IAAI,CAAC,EAAE,GAAI,CAAA,EAAE,GAAG,CAAC,CAAA,AAAC,EAAE,KAAK,CAAC,CAAC;IACzD,GAAG,CAAC,MAAM,EAAE,CAAC;CAChB;AAED,IAAI,MAAM,GAAiC;IACvC;AAAC,SAAC;AAAE,WAAG;KAAC;IACR;AAAC,YAAI;AAAE,YAAI;KAAC;IACZ;AAAC,WAAG;AAAE,WAAG;KAAC;IACV;AAAC,YAAI;AAAE,SAAC;KAAC;CACZ,AAAC;AAEF,SAAS,MAAM,CAAC,MAAa,EAAE;IAE3B,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAEjD,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,CAAE;QAC7B,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC;QACtB,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAEd,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC;QAEpB,IAAI,MAAK,GAAG,EAAE,EACV,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aACX,IAAI,MAAK,GAAG,IAAI,EACnB,GAAG,CAAC,IAAI,EAAE,MAAK,CAAC,CAAC;KAExB;IAED,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;IACzB,GAAG,CAAC,YAAY,GAAG,QAAQ,CAAC;IAC5B,GAAG,CAAC,IAAI,GAAG,gBAAgB,CAAC;IAC5B,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;CACrE;AAED,IAAI,KAAK,GAAG,CAAC,AAAC;AAEd,SAAS,OAAO,GAAG;IAEf,MAAM,CAAC,KAAK,CAAC,CAAC;IAEd,KAAK,IAAI,IAAI,CAAC;IACd,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;IAEzB,qBAAqB,CAAC,OAAO,CAAC,CAAC;CAClC;AAED,OAAO,EAAE,CAAC","sources":["index.ts"],"sourcesContent":["var canvas = document.querySelector(\"canvas\");\r\nvar ctx = canvas.getContext(\"2d\");\r\n\r\ncanvas.width = canvas.clientWidth * window.devicePixelRatio;\r\ncanvas.height = canvas.clientHeight * window.devicePixelRatio;\r\n\r\nctx.strokeStyle = \"purple\";\r\nctx.lineCap = \"round\";\r\nctx.lineWidth = 16;\r\n\r\nfunction arc(from: number, to: number) {\r\n    ctx.beginPath();\r\n    ctx.arc(canvas.width / 2, canvas.height / 2, canvas.height * 0.4, \r\n            Math.PI * (from + 1), Math.PI * (to + 1), false);\r\n    ctx.stroke();\r\n}\r\n\r\nvar pieces: [from: number, to: number][] = [\r\n    [0, 0.5],\r\n    [0.55, 0.65],\r\n    [0.7, 0.8],\r\n    [0.85, 1]\r\n];\r\n\r\nfunction render(value: number) {\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    for (const [from, to] of pieces) {\r\n        ctx.globalAlpha = 0.3;\r\n        arc(from, to);\r\n\r\n        ctx.globalAlpha = 1;\r\n\r\n        if (value > to) {\r\n            arc(from, to);\r\n        } else if (value > from) {\r\n            arc(from, value);\r\n        }\r\n    }\r\n\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.font = \"24pt Helvetica\";\r\n    ctx.fillText(\"random gaps!\", canvas.width / 2, canvas.height / 2);\r\n}\r\n\r\nlet value = 0;\r\n\r\nfunction doFrame() {\r\n\r\n    render(value);\r\n\r\n    value += 0.01;\r\n    if (value > 1) value = 0;\r\n\r\n    requestAnimationFrame(doFrame);\r\n}\r\n\r\ndoFrame();"],"names":[],"version":3,"file":"index.242b51c6.js.map","sourceRoot":"/__parcel_source_root/"}